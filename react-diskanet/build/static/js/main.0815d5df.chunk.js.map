{"version":3,"sources":["Components/components.js","Site.js","Discover.js","Register.js","Profile.js","App.js","serviceWorker.js","index.js"],"names":["BoxPanel","styled","div","ResultPanel","ResultButton","button","SliderPage","className","htmlFor","type","id","NavBar","renderRedirect","state","redirect","to","gotoHome","bind","gotoSite","gotoAProfile","gotoDiscover","event","this","setState","props","user_id","redirectTo","Container","Row","Col","Component","APIURL","SiteTitle","siteInfo","title_font","title_font_size","SiteBody","body_font","length","body_font_size","SitePanel","background_color","SiteBox","visitSite","changeSite","site_id","render","concat","target","key","results","sites","Object","keys","siteId","push","includes","renderHTML","onClick","SiteCreation0","name","title","body","genre_music","genre_art","genre_film","genre_writing","createSite","change","changeCheckbox","match","params","axios","get","then","response","console","log","post","headers","jwt","value","checked","onChange","SiteScreen0","site","owner_id","showDelete","putSite","activateDelete","deleteSite","url","ret","toString","delete","window","confirm","alert","SiteCreation","withRouter","SiteScreen","FilterButton","FilterPanel","DiscoverScreen","updateFilter","submitSearch","updateMayContain","mayName","substring","document","getElementsByName","genre","RegisterScreen","username","password","pass_or_text","email","textType","updateUsername","updatePassword","updateShowPassword","updateEmail","goRegister","UserInformation","userInfo","selectedFile","imageURL","handleUploadImage","ev","preventDefault","data","FormData","append","uploadInput","files","res","catch","err","warn","userStuff","src","alt","onSubmit","ref","Profile","App","loginToken","login","cookies","Cookies","put","set","path","expires","Date","now","exact","Banner","callLogin","gotoRegister","isLoggedIn","loggedIn","logout","remove","fluid","Boolean","location","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.0815d5df.chunk.js","sourcesContent":["import React from 'react';\nimport { Component } from 'react';\nimport styled from 'styled-components';\nimport { Redirect, NavLink } from 'react-router-dom';\n//import { withRouter } from \"react-router\";\n\nimport { Container, Col, Row } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n//import axios from 'axios';\n\n//const APIURL = 'http://localhost:5000/';\n\nconst BoxPanel = styled.div`\n    font-size: 30px;\n    background-color: #444;\n    color: #fff;\n    border-radius: 0px;\n    padding: 20px;\n    margin: 10px;\n`;\n\nconst ResultPanel = styled(BoxPanel)`\n    color: #000;\n    background-color: tomato;\n`;\n\nconst ResultButton = styled.button`\n    padding: 5px;\n    margin: 3px;\n    background-color: #ccc;\n    font-size: 110%;\n    font-family: inherit;\n    border-radius: 10px;\n    overflow-wrap: normal;\n`;\n/*\nconst RedirectButton = styled(ResultButton)`\n    background-color: #555555;\n    border: none;\n    color: white;\n    padding: 1em 5em;\n    text-align: center;\n    text-decoration: none;\n    display: inline-block;\n    font-size: 24px;\n    margin: 8px 4px;\n    cursor: pointer;\n    box-shadow: 0 2.5px 5px 0;\n    border-radius: 0px;\n`;*/\n\nconst SliderPage = () => {\n    return (\n        <div className=\"my-5\">\n          <label htmlFor=\"customRange1\">Example range</label>\n          <input type=\"range\" className=\"custom-range\" id=\"customRange1\" />\n        </div>\n    );\n}\n\n\n\nclass NavBar extends Component{\n    constructor(){\n        super()  \n        this.gotoHome = this.gotoHome.bind(this);\n        this.gotoSite = this.gotoSite.bind(this);\n        this.gotoAProfile = this.gotoAProfile.bind(this);        \n        this.gotoDiscover = this.gotoDiscover.bind(this);\n        this.renderRedirect = this.renderRedirect.bind(this);\n\n        this.state = { redirect: null };\n        \n    }\n    \n    renderRedirect = () => {\n        if (this.state.redirect){\n            //console.log(this.state);\n            return <Redirect to={this.state.redirect} />;\n        };\n        \n    }\n    \n    gotoHome(event){\n        //console.log(\"gotoHome\");\n        this.setState({ redirect: \"/\" });\n    }\n    \n    gotoSite(event){    \n        this.setState({ redirect: \"/sites/\"+this.props.user_id });\n    }\n    \n    gotoAProfile(event){\n        var redirectTo = \"/user/\"+this.props.user_id;\n        this.setState({ redirect: redirectTo });\n    }\n    \n    gotoDiscover(event){\n        this.setState({ redirect: \"/discover/\" });\n    }\n    \n    render(){\n        return(\n            <div>\n              {this.renderRedirect()}\n              <Container>\n                <Row>\n                  <Col>\n                    <NavLink to=\"/\">Home</NavLink>\n                  </Col>\n                  <Col>\n                    <NavLink to={\"/sites/\"+this.props.user_id}>My Sites</NavLink>\n                  </Col>\n                  <Col>\n                    <NavLink to=\"/discover\">Discover</NavLink>\n                  </Col>\n                  <Col>\n                    <NavLink to={\"/user/\"+this.props.user_id}>My Profile</NavLink>\n                  </Col>\n                </Row>\n              </Container>\n            </div>\n        );\n    }   \n}\n\n\n\nexport {BoxPanel, SliderPage, ResultPanel, ResultButton, NavBar};\n","import React from 'react';\nimport { Component } from 'react';\nimport styled from 'styled-components'\nimport axios from 'axios';\nimport { withRouter /*,useHistory*/ } from \"react-router\";\nimport { Redirect } from 'react-router-dom';\nimport renderHTML from 'react-render-html';\nimport { ResultButton } from './Components/components.js';\n\nconst APIURL = 'http://localhost:5000/';\n//const APIURL='';\nconst SiteTitle = styled.div`\n    font-family: ${props => props.siteInfo.title_font !== \"\" ? props.siteInfo.title_font : \"\"};\n    font-size: ${props => \n        props.siteInfo.title_font_size !== \"\" ? props.siteInfo.title_font_size + 'px' : \"\"};\n`;\n\nconst SiteBody = styled.div`\n    font-family: ${props => props.siteInfo.body_font.length ? props.siteInfo.body_font : \"Comic Sans\"};\n    font-size: ${props => \n        props.siteInfo.body_font_size !== \"\" ? props.siteInfo.body_font_size + 'px' : \"\"};\n`;\n\nconst SitePanel = styled.div`\n    background-color: ${props => \n        props.siteInfo.background_color.length ? props.siteInfo.background_color : \"\"};\n`;\n\n//component displays all of a user's sites WITH CSS\nclass SiteBox extends Component {\n    constructor(props){\n        super(props); //results (multiple sites)\n        this.visitSite = this.visitSite.bind(this);\n        this.changeSite = this.changeSite.bind(this);\n        this.state = {redirect: false, site_id:''};\n        this.render = this.render.bind(this);\n    }\n    visitSite(){\n        return (\n            this.state.redirect\n                ? <Redirect to={'/site/'.concat(this.state.site_id)} />\n                : ''\n        );        \n        //console.log(id);\n    }\n    \n    changeSite(event){\n        this.setState({redirect:true, site_id:event.target.id, user_id:event.target.key})\n    }\n    \n    render(){\n        var results = this.props.results;\n        \n        const sites = [];\n        if (Object.keys(results).length > 0){\n            for (var key of Object.keys(results['data'])){\n                //sites's id\n                var siteId = key;\n                //all a site info\n                var siteInfo = results['data'][siteId];\n                \n                \n                \n                sites.push(\n                    <div key={siteId}>\n                      <SitePanel siteInfo = {siteInfo}>\n                        <SiteTitle siteInfo = {siteInfo}>\n                          <h2> {siteInfo['title']} </h2>\n                        </SiteTitle>\n                        \n                        <SiteBody siteInfo = {siteInfo}>\n                        \n                            {siteInfo['body'].includes(\"<p>\") ? renderHTML(siteInfo['body']) : <p>{siteInfo['body']}</p> }\n                            \n                            \n                          <ResultButton id={siteId} key={siteInfo['owner_id']}\n                                        onClick={this.changeSite}>Visit</ResultButton>\n                        </SiteBody>\n                      </SitePanel>                  \n                    </div>\n                );\n            }\n        }\n        \n        return(\n            <div>\n              {this.visitSite()}\n              {sites}\n            </div>\n        );\n    }\n}\n\n//displays sitebox (user's sites) AND site creation form\nclass SiteCreation0 extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            sites:{}, \n            background_color:'Gray',\n            name:'',\n            title:'', \n            title_font:'Times New Roman', \n            title_font_size:'', \n            body:'', \n            body_font:'Times New Roman', \n            body_font_size:'',\n            genre_music:false,\n            genre_art:false,\n            genre_film:false,\n            genre_writing:false\n        };\n        this.createSite = this.createSite.bind(this);\n        this.change = this.change.bind(this);\n        this.changeCheckbox = this.changeCheckbox.bind(this);\n    }\n    \n    componentDidMount(){\n        const user_id = this.props.match.params.user_id;\n        axios.get(APIURL + 'sites/'.concat(user_id)).then( response => {\n            this.setState({'sites' : response});\n            console.log(response);\n        });\n        \n        axios.get(APIURL + 'user/'.concat(user_id)).then( response => {\n            this.setState({'name' : response['data'].name});\n        });\n    }\n    \n    createSite(){\n        const user_id = this.props.match.params.user_id;\n        axios.post(APIURL+\"sites/\"+user_id, {\n            background_color:this.state.background_color,\n            name:this.state.name,\n            title:this.state.title,\n            title_font:this.state.title_font,\n            title_font_size:this.state.title_font_size,\n            body:this.state.body,\n            body_font:this.state.body_font,\n            body_font_size:this.state.body_font_size,\n            genre_music:this.state.genre_music,\n            genre_art:this.state.genre_art,\n            genre_film:this.state.genre_film,\n            genre_writing:this.state.genre_writing\n        }, {\n            headers: {\n                'Authorization': `Bearer ${this.props.jwt}` \n            }\n        }).then(response => {\n            this.setState({'sites' : response});\n            console.log(response);\n        });\n    }\n    \n    change(event){\n        this.setState({ [event.target.name] : event.target.value });\n    }\n    \n    changeCheckbox(event){\n        //event.target.value = event.target.checked;\n        //this.change(event);\n        this.setState({ [event.target.name] : event.target.checked });\n\n    }\n    \n    render(){\n        return(\n            <div>\n              <p>These are your created sites:</p>\n              <SiteBox results={this.state.sites} />\n              <form>\n              Title:\n              <select name='title_font' value={this.state.title_font} onChange={this.change}>\n                <option value=\"American Typewriter\">American Typewriter</option>\n                <option value=\"Impact\">Impact</option>\n                <option value=\"Fantasy\">Fantasy</option>\n                <option value=\"Times New Roman\">Times New Roman</option>\n                <option value=\"Comic Sans MS\">Comic Sans MS</option>\n              </select>\n              <input type=\"text\" name=\"title\" value={this.state.title}\n                            onChange={this.change}/>\n              <br />\n                Title Font Size:<input type=\"text\" name=\"title_font_size\"\n                                       value={this.state.title_font_size} onChange={this.change}/>\n              <br />Body:\n              <select name='body_font' value={this.state.body_font} onChange={this.change}>            \n                <option value=\"American Typewriter\">American Typewriter</option>\n                <option value=\"Impact\">Impact</option>\n                <option value=\"Fantasy\">Fantasy</option>\n                <option value=\"Times New Roman\">Times New Roman</option>\n                <option value=\"Comic Sans MS\">Comic Sans MS</option>\n              </select>\n              <textarea name=\"body\" value={this.state.body}\n                            onChange={this.change}/>\n              <br />\n                Body Font Size:<input type=\"text\" name=\"body_font_size\"\n                                      value={this.state.body_font_size}\n                                      onChange={this.change}/>\n              <br />\n              Background Color\n                <select name='background_color' value={this.state.background_color}\n                        onChange={this.change}>            \n                  <option value=\"Maroon\">Maroon</option>\n                  <option value=\"Red\">Red</option>\n                  <option value=\"Orange\">Orange</option>\n                  <option value=\"Yellow\">Yellow</option>\n                  <option value=\"Olive\">Olive</option>\n                  <option value=\"Green\">Green</option>\n                  <option value=\"Purple\">Purple</option>\n                  <option value=\"Fuchsia\">Fuchsia</option>\n                  <option value=\"Lime\">Lime</option>\n                  <option value=\"Teal\">Teal</option>\n                  <option value=\"Gray\">Gray</option>\n                </select>\n              <br />\n            <div>\n              Genre: Music<input \n\t\t       type=\"checkbox\" \n\t\t       name=\"genre_music\"\n\t\t       onChange={this.changeCheckbox}>\n\t\t       </input>\n\t\t       \n               Art<input \n\t\t       type=\"checkbox\" \n\t\t       name=\"genre_art\"\n\t\t       onChange={this.changeCheckbox}>\n\t\t       </input>\n\t\t       \n               Film<input \n\t\t       type=\"checkbox\" \n\t\t       name=\"genre_film\"\n\t\t       onChange={this.changeCheckbox}>\n\t\t       </input>\n\t\t       \n               Writing<input \n\t\t       type=\"checkbox\" \n\t\t       name=\"genre_writing\"\n\t\t       onChange={this.changeCheckbox}>\n\t\t       </input>\n\t\t    </div>\n\t\t     <br/>\n              \n              \n              </form>\n              <ResultButton onClick={this.createSite}> Create Site </ResultButton>\n            </div>\n        );\n    }\n}\n\n//displays a single site\nclass SiteScreen0 extends Component {\n    constructor(props){\n        super(props);\n        \n        this.state = { site: {\n            title: '',\n                body: '',\n                background_color: 'white',\n                body_font_size: '48',\n                title_font_size: '30',\n                body_font: 'Comic Sans MS',\n                title_font: 'Arial',\n                genre_music: '',\n                genre_art: '',\n                genre_film: '',\n                genre_writing: '',\n                owner_id: ''\n        }, site_id:'', showDelete:false, redirect:false };\n        \n        this.putSite = this.putSite.bind(this);\n        this.activateDelete = this.activateDelete.bind(this);\n        this.deleteSite = this.deleteSite.bind(this);\n    }\n    \n    componentDidMount(){\n        const site_id = this.props.match.params.site_id;\n        const url = APIURL.concat('site/', site_id);\n        \n        //get site\n        axios.get(url).then( response => {\t\t\n            const id = Object.keys(response['data'])[0];\n            const ret = response['data'][id];\n            //console.log(ret);\n            this.setState({ 'site': ret, 'site_id': site_id });\n            \n            //render delete button\n            if (ret.owner_id.toString() === this.props.user_id.toString()){\n                this.setState({ 'showDelete': true });\n            }\n            \n        });\n        \n        \n    }\n    \n    putSite(){\n\t\n    }\n    activateDelete(){\n        const site_id = this.props.match.params.site_id;\n        const url = APIURL.concat('site/', site_id);\n        \n        if(this.props.user_id.toString() === this.state.site.owner_id.toString()){\n            console.log(this.props.jwt);\n            axios.delete(url, {\n                headers: {\n                    'Authorization': `Bearer ${this.props.jwt}` \n                }\n            }).then( response => {\n                console.log(\"Site was deleted!\");\n                this.setState({redirect:true});\n            });\n        }\n    }\n    \n    deleteSite(){\n        //const site_id = this.props.match.params.site_id;\n        //const url = APIURL.concat('site/', site_id);\n        var r=window.confirm(\"are you sure you want to delete your site?\");        \n        if (r) {\n            this.activateDelete();        \n        } else {\n            alert(\"You are not the owner of this site\");\n        }\n    }\n    \n    render(){\n        var site = this.state.site;\n        \n        return (\n            \n            <div>\t     \n\t      <SitePanel siteInfo = {site}>\n\t\t<SiteTitle siteInfo = {site}>\n\t\t  <h2> {site['title']} </h2>\n\t\t</SiteTitle>\n\t\t\n\t\t<SiteBody siteInfo = {site}>   \n          {site['body'].includes(\"<p>\") ? renderHTML(site['body']) : <p>{site['body']}</p> }\n\n          <div>\n          <br />\n          Genres:\n          {site['genre_music'].toString() === 'true' ? <li>Music</li>  : ''}\n          {site['genre_art'].toString() === 'true' ? <li> Art </li> : ''}\n          {site['genre_film'].toString() === 'true' ? <li> Film </li> : ''}\n          {site['genre_writing'].toString() === 'true' ? <li> Writing </li> : ''}\n          <br />\n          </div>\n          <p> site created by: {site.name} </p>\n          \n          {this.state.showDelete ? <ResultButton onClick={this.deleteSite}> Delete</ResultButton> : '' }\n          {this.state.redirect ? <Redirect to={\"/sites/\"+this.state.site.owner_id} /> : ''}\n\t\t</SiteBody>\n\t      </SitePanel>                    \n\t    </div>\n        );\n    }   \n}\n\nconst SiteCreation = withRouter(SiteCreation0);\nconst SiteScreen = withRouter(SiteScreen0);\nexport {SiteBox, SiteScreen, SiteBody, SitePanel, SiteTitle, SiteCreation};\n","import React from 'react';\nimport { Component } from 'react';\nimport styled from 'styled-components'\nimport axios from 'axios';\n\nimport './App.css';\n// import {SliderPage, ResultPanel, ResultSites} from './Components/components.js';\nimport {SliderPage, ResultPanel} from './Components/components.js';\nimport {SiteBox} from './Site.js';\n//submit discover filter button\nconst FilterButton = styled.button`\n\tpadding: 5px;\n\tmargin: 3px;\n\tbackground-color: #ccc;\n\tfont-size: 110%;\n\tfont-family: inherit;\n`;\n\n//filter panel for genres\nconst FilterPanel = styled.div`\n\tdisplay: inline-block;\n\tfont-size: 1em;\n\tbackground-color: #444;\n\tcolor: #fff;\n\tborder-radius: 0px;\n\tpadding: 20px;\n\tmargin: 10px;\n\tfont-family: serif\n`;\n\n//genre_music, genre_art, genre_film, genre_writing\n//const APIURL = 'http://localhost:5000/';\nconst APIURL='api/';\nexport default class DiscoverScreen extends Component {\n    constructor(props){\n        super(props)\n\t//at first there is no state to submit\n\t//this.state = {}\n        this.state = { genre_music: \"0\", genre_art: \"0\", genre_film: \"0\",\n                       genre_writing: \"0\", results: {} };\n\t\n        this.updateFilter = this.updateFilter.bind(this);\n\t    this.submitSearch = this.submitSearch.bind(this);\n        this.updateMayContain = this.updateMayContain.bind(this);\n    }\n    \n    updateFilter(event) {\n\tif (event.target.checked) {\n\t    //make may genre unchecked\n\t    var mayName = event.target.name.substring(6);\n\t    document.getElementsByName(mayName)[0].checked = false;\n\t    \n\t    this.setState({\n\t\t[event.target.name] : \"1\",\n\t    });\n\t} else {\n\t    this.setState({\n\t\t[event.target.name] : \"0\",\n\t    });\n\t}\n    }\n    \n    updateMayContain(event) {\n        var genre = \"genre_\".concat(event.target.name);\n        if (event.target.checked){\n            //make must contain genre unchecked\n            \n            document.getElementsByName(genre)[0].checked = false;\n            this.setState({ [genre] : \"\",});\n        } else {\n            this.setState({ [genre] : \"0\",});\n        }\n    }\n    \n    submitSearch() {\n        //erase old results before creating new ones (if there is any)  console.log(response);\n        this.setState({'results' : {}});\n        axios.post(APIURL + 'discover', this.state).then( response => {\n            /*example of response---------\n              { \n              1 : {title:'example title', body: 'example body', ... },\n              2 : {title:'title example', body: 'body example', ... },\n              }\n            */\n            this.setState({'results' : response});\n            console.log(this.state);\n        });\n    };\n    \n    render(){\n\treturn (\n\t    <div>\n\t      <FilterPanel>\n\t\t<h1>Select Genre(s)</h1>\n\t\t<h2>must contain | may contain</h2>\n\t\tMusic<input \n\t               type=\"checkbox\" \n\t               name=\"genre_music\"\n\t               onChange={this.updateFilter.bind(this)}>\n\t\t     </input>\n\t\tMusic<input \n\t\t       type=\"checkbox\" \n\t\t       name=\"music\"\n\t\t       onChange={this.updateMayContain.bind(this)}>\n\t\t     </input><br/>\n\t\tArt<input \n\t\t     type=\"checkbox\" \n\t\t     name=\"genre_art\"\n\t\t     onChange={this.updateFilter.bind(this)}>\n\t\t   </input>\n\t\tArt<input \n\t\t     type=\"checkbox\" \n\t\t     name=\"art\"\n\t\t     onChange={this.updateMayContain.bind(this)}>\n\t\t   </input><br/>\n\t\tFilm<input \n\t\t      type=\"checkbox\" \n\t\t      name=\"genre_film\"\n\t\t      onChange={this.updateFilter.bind(this)}>\n\t\t    </input>\n\t\tFilm<input \n\t\t      type=\"checkbox\" \n\t\t      name=\"film\"\n\t\t      onChange={this.updateMayContain.bind(this)}>\n\t\t    </input><br/>\n\t\tWriting<input \n\t\t\t type=\"checkbox\" \n\t\t\t name=\"genre_writing\"\n\t\t\t onChange={this.updateFilter.bind(this)}>\n\t\t       </input>\n\t\tWriting<input \n\t\t\t type=\"checkbox\" \n\t\t\t name=\"writing\"\n\t\t\t onChange={this.updateMayContain.bind(this)}>\n\t\t       </input><br/>\t\n\t\t<SliderPage />\n\t        \n\t\t<FilterButton type=\"button\" onClick={this.submitSearch}>\n                  Discover!\n                </FilterButton>\n\t      </FilterPanel>\n\t      <br />\n\t      <ResultPanel>\n\t\t<SiteBox results={this.state.results} />\n\t      </ResultPanel>\n\t    </div>\n\t);\n    }\n}\n\nexport {DiscoverScreen, FilterButton, FilterPanel};\n","import React from 'react';\nimport { Component } from 'react';\nimport axios from 'axios';\n\n//const APIURL = 'http://localhost:5000/';\nconst APIURL = 'api/';\nclass RegisterScreen extends Component {\n    constructor(props){\n        super(props)\n        this.state = {username : '', password:'', pass_or_text:'password', email:''};\n        this.textType = \"password\"\n\n        //this.logIt = this.logIt.bind(this)\n        this.updateUsername = this.updateUsername.bind(this);\n        this.updatePassword = this.updatePassword.bind(this);\n        this.updateShowPassword = this.updateShowPassword.bind(this);\n        this.updateEmail = this.updateEmail.bind(this);\n\t\tthis.goRegister = this.goRegister.bind(this);\n    }\n    \n    updateUsername(event) {\n        this.setState({username: event.target.value});\n    }\n    \n    updatePassword(event) {\n        this.setState({password: event.target.value});           \n    }\n    \n    updateEmail(event){\n        this.setState({email: event.target.value});\n    }\n    \n    updateShowPassword(event){\n        this.setState({pass_or_text: (this.state.pass_or_text === 'password' ? 'text' : 'password')});\n    }\n    \n    goRegister(event){\n\t//console.log({msg:'successful button click'});\n\taxios.post(APIURL + 'user', {\n\t    name: this.state.username, \n\t    password: this.state.password, \n\t    email: this.state.email}).then( response => {\n\t\t/*example of response---------\n\t\t  { \n\t\t  1 : {title:'example title', body: 'example body', ... },\n\t\t  2 : {title:'title example', body: 'body example', ... },\n\t\t  }\n\t\t*/\n\t\tconsole.log(response);\n\t\t//this.setState({['results'] : response});\n\t    });\n    }\n    \n    render(){\n        const { pass_or_text } = this.state;\n        \n        return(\n            <div>\n              <form>\n                <p>register</p>\n                email<input type=\"text\" name=\"email\" value={this.state.email}\n                            onChange={this.updateEmail}/>\n        \tusername<input type=\"text\" value={this.state.username}\n\t                       onChange={this.updateUsername}/>\n\t        <br/>\n        \tpassword<input type={pass_or_text} value={this.state.password} name=\"password\"\n        \t               onChange={this.updatePassword}/>\n\t        <br/>\n        \tshow password<input type=\"checkbox\" value=\"\" name=\"ShowPassword\"\n        \t                    onChange={this.updateShowPassword}/>\n\t        <br/>\n\t        <button type='button' onClick={ this.goRegister} \n\t                name='registerButton'>register</button>\n\t      </form>\n            </div>\n        );\n    }\n}\n\nexport { RegisterScreen };\n","import React from 'react';\nimport { Component } from 'react';\n//import styled, { css } from 'styled-components'\nimport axios from 'axios';\nimport { withRouter } from \"react-router\";\n\nimport {\n// eslint-disable-next-line\n  BrowserRouter as Router, Switch, Route, Link, useRouteMatch, useParams\n} from \"react-router-dom\";\n\n\n//const APIURL = 'http://localhost:5000/';\nconst APIURL='api/';\n\n//PROFILE COMPONENT\nclass UserInformation extends Component {\n    constructor(props){\n        super(props);\n\t\n        this.state = {userInfo:{}, selectedFile: null, imageURL:'http://localhost:5000/photo/9'};\n    \n        this.handleUploadImage = this.handleUploadImage.bind(this);\n    }\t\n    \n    componentDidMount(){\n\t//const id = this.props.match.params.id;\n\tconst user_id = this.props.match.params.user_id;\n        \n\taxios.get(APIURL + 'user/'.concat(user_id)).then( response => {\n\t    this.setState({'userInfo' : response['data']});\n\t    console.log(response);\n\t});\n    }\n    handleUploadImage(ev) {\n        ev.preventDefault();\n\n        const data = new FormData();\n        data.append('file', this.uploadInput.files[0]);\n        data.append('user_id', this.state.userInfo.user_id);\n        \n        axios\n        .post(APIURL+'photo', data)\n        .then(res => console.log(res))\n        .catch(err => console.warn(err));\n    }\n    \n    \n    \n    \n    render(){\t\t\n        //getting every key of user's info\n        var userStuff = [];\n        for (var key of Object.keys(this.state['userInfo'])){\n            userStuff.push(\n                <div key={key}>\n                    <p>{key}:{this.state.userInfo[key]}</p>\n                </div>\n            );\n        }\n    \n        return(\n            <>\n              <div>\n                <p>This is {this.state.userInfo['name']}'s profile</p>\n                {userStuff}\n              </div>\n              <div>\n              <img src={this.state.imageURL} alt=\"img\" />\n              \n              <form onSubmit={this.handleUploadImage}>\n                <div>\n                  <input ref={(ref) => { this.uploadInput = ref; }} type=\"file\" />\n                </div>\n                \n                <div>\n                  <button>Upload</button>\n                </div>\n                \n              </form>\n                      \n              </div>\n              \n            </>\n        );\n    }\n}\n\nconst Profile = withRouter(UserInformation);\nexport {Profile};\n","import React from 'react';\nimport { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport Cookies from 'universal-cookie';\n\n\n\nimport axios from 'axios';\nimport {\n  HashRouter,\n  Switch,\n  Route,\n  // eslint-disable-next-line\n  Link, useRouteMatch, useParams\n} from \"react-router-dom\";\nimport { Container /*, Col, Row */ } from 'react-bootstrap';\n\nimport './App.css';\n// eslint-disable-next-line\nimport {DiscoverScreen} from './Discover.js';\nimport {SiteScreen, SiteCreation} from './Site.js';\nimport {RegisterScreen} from './Register.js';\nimport {Profile} from './Profile.js';\n\n//components imported\nimport {BoxPanel, NavBar,  /*, ResultSites */ } from './Components/components.js';\n\n//flask url\n//const APIURL = 'http://localhost:5000/';\nconst APIURL='api/';\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {loginToken: '', user_id:''};\n        this.login = this.login.bind(this);\n        \n        \n    }\n    componentDidMount(){\n        const cookies = new Cookies();\n        //console.log(cookies.get('jwt'));\n        //console.log(cookies.get('user_id'));\n        if (cookies.get('jwt') && cookies.get('user_id') && cookies.get('name')){\n            this.setState({ loginToken: cookies.get('jwt'), user_id: cookies.get('user_id'), name: cookies.get('name') });\n        }\n        \n        \n    }\n    login(username, password)  {\n\n    axios.put(\n            APIURL + 'user',\n            { 'name':username, 'password':password})\n            .then( response => {\n                if (response['data']['jwt'].length > 0){\n                    this.setState({'loginToken' : response['data']['jwt'],\n                                   'user_id':response['data']['id'] });\n                    const cookies = new Cookies();\n                    cookies.set('user_id', response['data']['id'], { path: '/', expires: new Date(Date.now()+3600000) });\n                    cookies.set('jwt', response['data']['jwt'], { path: '/', expires: new Date(Date.now()+3600000) });\n                    cookies.set('name', username, { path: '/', expires: new Date(Date.now()+3600000) });\n                    \n                } else{\n                    return false;\n                }\n        //store user's id and token into cookies\n        \n\t\t//console.log(response);\n\t    });  // todo: add error-checking\n        \n        \n        return true;\n    }\n    \n    render(){\n        \n    //<DiscoverScreen /> route guide\n\treturn (\n\t    <HashRouter>\n              <div className=\"App\">\n                <Banner login={ this.login } user_id={ this.state.user_id } />\n                \n\t\t<Switch>\n\t\t  <Route exact path=\"/\">\n\t\t    <p>this is the app</p>\n\t\t  </Route>\n                  \n\t\t  <Route path=\"/user/:user_id\">\n\t\t    <Profile />                   \n\t\t  </Route>\n          \n                  <Route exact path=\"/sites/:user_id\">\n                    <SiteCreation jwt={this.state.loginToken} />\n                  </Route>\n                  \n\t\t  <Route exact path=\"/site/:site_id\">\n\t\t    <SiteScreen user_id={ this.state.user_id } jwt={this.state.loginToken}  />\n\t\t  </Route>\n                  \n\t\t  <Route path=\"/register\">\n                    <RegisterScreen/>\n\t\t  </Route>\n                  \n                  <Route path=\"/discover\">\n                    <DiscoverScreen />\n                  </Route>\n                  \n                  <Route path=\"/user\">\n                    <p>Authorization Failed: You must be logged in to view your profile</p>\n                  </Route>\n\t\t</Switch>\n\t      </div>\n\t    </HashRouter>\n\t);\n    }\n}\n\nclass Banner extends Component {\n    constructor(props) {\n        super(props);\n        this.updateUsername = this.updateUsername.bind(this);\n        this.updatePassword = this.updatePassword.bind(this);\n        this.callLogin = this.callLogin.bind(this);\n        this.gotoRegister = this.gotoRegister.bind(this);\n        this.renderRedirect = this.renderRedirect.bind(this);\n        this.state = { name:'', password:'', user_id:'', redirect: false, isLoggedIn: false };\n        \n        this.loggedIn = this.loggedIn.bind(this);\n        this.logout = this.logout.bind(this);\n    }\n    \n    componentDidMount(){\n        //makes user_id the same as app (so if logged in on app, logged in on banner)\n        \n    }\n\n    gotoRegister(event) {\n        this.setState({redirect: true});\n    }\n\n    renderRedirect() {\n        return (\n            this.state.redirect ? <Redirect to='/register/'/> : ''\n        );\n    }\n    \n    updateUsername(event) {\n        this.setState({name: event.target.value});\n    }\n    \n    updatePassword(event) {\n        this.setState({password: event.target.value});\n    }\n\n    callLogin(event) {\n        if (this.state.name !== 0 && this.state.password !== 0){\n            let r = this.props.login(this.state.name, this.state.password);\n            //check if logged in\n            //console.log(r);\n            if (r)\n                this.setState({isLoggedIn:true});\n        }\n    }\n    loggedIn(){\n        const cookies = new Cookies();\n        \n        let name = '';\n        if (cookies.get('name')){\n            name = cookies.get('name')\n            //console.log('cookie name'+name)\n            return name\n        }else if (this.state.name && this.state.isLoggedIn){\n            name = this.state.name\n            //console.log('states name'+name)\n            return name\n        }else{\n            return false\n        }\n    }\n    logout(event){\n        const cookies = new Cookies();\n        cookies.remove('name')\n        cookies.remove('jwt')\n        cookies.remove('user_id')\n        this.setState({isLoggedIn: false});\n        \n    }\n    render() {\n        // todo: make a conditional render to just show \"logged in\" when logged in\n        // todo: add a register button\n        //const cookies = new Cookies();\n        \n        \n        \n        return (          \n            <div className=\"App-banner\">\n              <div className='App-title'>\n                <Container fluid>                  \n                  <BoxPanel>\n                    Nathan's World\n                  </BoxPanel>\n                                    \n                  <BoxPanel>\n                    { !this.loggedIn() ? \n                      <div>\n                        {this.renderRedirect()}\n                        <form>\n                          username<input type=\"text\" value={this.state.name}\n                                         onChange={this.updateUsername}/>\n                          <br/>\n                          password<input type=\"password\" name=\"password\" value={this.state.password}\n                                         onChange={this.updatePassword}/>\n                          <br/>\n                          <button type='button' onClick={this.callLogin} \n                                  name='loginButton'>LOGIN</button>\n                          <button type='button' onClick={this.gotoRegister}\n                                  name='registerButton'>Register</button>\n                        </form>\n                      </div> \n                      \n                      : \n                      \n                      <div>\n                      <p>Logged in as: {this.loggedIn()}</p>\n                      <button type='button' onClick={this.logout}>LOGOUT</button>\n                      </div>\n                    }\n                  </BoxPanel>\n                  \n                  <NavBar user_id = {this.props.user_id} />\n                  \n                </Container>\n              </div>\n            </div>\n            \n        );\n    }\n}\n\nexport default App;\n//export Banner, RegistrationScreen; Why does banner not work even when its exported?\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}