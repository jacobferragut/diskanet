{"version":3,"sources":["Components/components.js","Site.js","Discover.js","Register.js","Profile.js","App.js","serviceWorker.js","index.js"],"names":["BoxPanel","styled","div","ResultPanel","ResultButton","button","SliderPage","className","htmlFor","type","id","NavBar","renderRedirect","state","redirect","to","gotoHome","bind","gotoSite","gotoAProfile","gotoDiscover","event","this","setState","props","user_id","redirectTo","Container","Row","Col","Component","SiteTitle","siteInfo","title_font","title_font_size","SiteBody","body_font","length","body_font_size","SitePanel","background_color","SiteBox","visitSite","changeSite","site_id","render","concat","target","key","results","sites","Object","keys","siteId","push","includes","renderHTML","onClick","SiteCreation0","name","title","body","genre_music","genre_art","genre_film","genre_writing","createSite","change","changeCheckbox","match","params","axios","get","then","response","console","log","post","headers","jwt","value","checked","onChange","SiteScreen0","site","owner_id","showDelete","putSite","activateDelete","deleteSite","url","ret","toString","delete","window","confirm","alert","SiteCreation","withRouter","SiteScreen","FilterButton","FilterPanel","DiscoverScreen","updateFilter","submitSearch","updateMayContain","mayName","substring","document","getElementsByName","genre","RegisterScreen","username","password","pass_or_text","email","textType","updateUsername","updatePassword","updateShowPassword","updateEmail","goRegister","APIURL","UserInformation","userInfo","selectedFile","imageURL","handleUploadImage","ev","preventDefault","data","FormData","append","uploadInput","files","res","catch","err","warn","userStuff","src","alt","onSubmit","ref","Profile","App","loginToken","login","cookies","Cookies","put","set","path","expires","Date","now","exact","Banner","callLogin","gotoRegister","isLoggedIn","loggedIn","logout","remove","fluid","Boolean","location","hostname","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a8dd317e.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport { Redirect, NavLink } from 'react-router-dom';\r\n//import { withRouter } from \"react-router\";\r\n\r\nimport { Container, Col, Row } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n//import axios from 'axios';\r\n\r\n//const APIURL = 'http://localhost:5000/';\r\n\r\nconst BoxPanel = styled.div`\r\n    font-size: 30px;\r\n    background-color: #444;\r\n    color: #fff;\r\n    border-radius: 0px;\r\n    padding: 20px;\r\n    margin: 10px;\r\n`;\r\n\r\nconst ResultPanel = styled(BoxPanel)`\r\n    color: #000;\r\n    background-color: tomato;\r\n`;\r\n\r\nconst ResultButton = styled.button`\r\n    padding: 5px;\r\n    margin: 3px;\r\n    background-color: #ccc;\r\n    font-size: 110%;\r\n    font-family: inherit;\r\n    border-radius: 10px;\r\n    overflow-wrap: normal;\r\n`;\r\n/*\r\nconst RedirectButton = styled(ResultButton)`\r\n    background-color: #555555;\r\n    border: none;\r\n    color: white;\r\n    padding: 1em 5em;\r\n    text-align: center;\r\n    text-decoration: none;\r\n    display: inline-block;\r\n    font-size: 24px;\r\n    margin: 8px 4px;\r\n    cursor: pointer;\r\n    box-shadow: 0 2.5px 5px 0;\r\n    border-radius: 0px;\r\n`;*/\r\n\r\nconst SliderPage = () => {\r\n    return (\r\n        <div className=\"my-5\">\r\n          <label htmlFor=\"customRange1\">Example range</label>\r\n          <input type=\"range\" className=\"custom-range\" id=\"customRange1\" />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nclass NavBar extends Component{\r\n    constructor(){\r\n        super()  \r\n        this.gotoHome = this.gotoHome.bind(this);\r\n        this.gotoSite = this.gotoSite.bind(this);\r\n        this.gotoAProfile = this.gotoAProfile.bind(this);        \r\n        this.gotoDiscover = this.gotoDiscover.bind(this);\r\n        this.renderRedirect = this.renderRedirect.bind(this);\r\n\r\n        this.state = { redirect: null };\r\n        \r\n    }\r\n    \r\n    renderRedirect = () => {\r\n        if (this.state.redirect){\r\n            //console.log(this.state);\r\n            return <Redirect to={this.state.redirect} />;\r\n        };\r\n        \r\n    }\r\n    \r\n    gotoHome(event){\r\n        //console.log(\"gotoHome\");\r\n        this.setState({ redirect: \"/\" });\r\n    }\r\n    \r\n    gotoSite(event){    \r\n        this.setState({ redirect: \"/sites/\"+this.props.user_id });\r\n    }\r\n    \r\n    gotoAProfile(event){\r\n        var redirectTo = \"/user/\"+this.props.user_id;\r\n        this.setState({ redirect: redirectTo });\r\n    }\r\n    \r\n    gotoDiscover(event){\r\n        this.setState({ redirect: \"/discover/\" });\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n              {this.renderRedirect()}\r\n              <Container>\r\n                <Row>\r\n                  <Col>\r\n                    <NavLink to=\"/\">Home</NavLink>\r\n                  </Col>\r\n                  <Col>\r\n                    <NavLink to={\"/sites/\"+this.props.user_id}>My Sites</NavLink>\r\n                  </Col>\r\n                  <Col>\r\n                    <NavLink to=\"/discover\">Discover</NavLink>\r\n                  </Col>\r\n                  <Col>\r\n                    <NavLink to={\"/user/\"+this.props.user_id}>My Profile</NavLink>\r\n                  </Col>\r\n                </Row>\r\n              </Container>\r\n            </div>\r\n        );\r\n    }   \r\n}\r\n\r\n\r\n\r\nexport {BoxPanel, SliderPage, ResultPanel, ResultButton, NavBar};\r\n","import React from 'react';\r\nimport { Component } from 'react';\r\nimport styled from 'styled-components'\r\nimport axios from 'axios';\r\nimport { withRouter /*,useHistory*/ } from \"react-router\";\r\nimport { Redirect } from 'react-router-dom';\r\nimport renderHTML from 'react-render-html';\r\nimport { ResultButton } from './Components/components.js';\r\n\r\n//const APIURL = 'http://localhost:5000/';\r\nconst APIURL='';\r\nconst SiteTitle = styled.div`\r\n    font-family: ${props => props.siteInfo.title_font !== \"\" ? props.siteInfo.title_font : \"\"};\r\n    font-size: ${props => \r\n        props.siteInfo.title_font_size !== \"\" ? props.siteInfo.title_font_size + 'px' : \"\"};\r\n`;\r\n\r\nconst SiteBody = styled.div`\r\n    font-family: ${props => props.siteInfo.body_font.length ? props.siteInfo.body_font : \"Comic Sans\"};\r\n    font-size: ${props => \r\n        props.siteInfo.body_font_size !== \"\" ? props.siteInfo.body_font_size + 'px' : \"\"};\r\n`;\r\n\r\nconst SitePanel = styled.div`\r\n    background-color: ${props => \r\n        props.siteInfo.background_color.length ? props.siteInfo.background_color : \"\"};\r\n`;\r\n\r\n//component displays all of a user's sites WITH CSS\r\nclass SiteBox extends Component {\r\n    constructor(props){\r\n        super(props); //results (multiple sites)\r\n        this.visitSite = this.visitSite.bind(this);\r\n        this.changeSite = this.changeSite.bind(this);\r\n        this.state = {redirect: false, site_id:''};\r\n        this.render = this.render.bind(this);\r\n    }\r\n    visitSite(){\r\n        return (\r\n            this.state.redirect\r\n                ? <Redirect to={'/site/'.concat(this.state.site_id)} />\r\n                : ''\r\n        );        \r\n        //console.log(id);\r\n    }\r\n    \r\n    changeSite(event){\r\n        this.setState({redirect:true, site_id:event.target.id, user_id:event.target.key})\r\n    }\r\n    \r\n    render(){\r\n        var results = this.props.results;\r\n        \r\n        const sites = [];\r\n        if (Object.keys(results).length > 0){\r\n            for (var key of Object.keys(results['data'])){\r\n                //sites's id\r\n                var siteId = key;\r\n                //all a site info\r\n                var siteInfo = results['data'][siteId];\r\n                \r\n                \r\n                \r\n                sites.push(\r\n                    <div key={siteId}>\r\n                      <SitePanel siteInfo = {siteInfo}>\r\n                        <SiteTitle siteInfo = {siteInfo}>\r\n                          <h2> {siteInfo['title']} </h2>\r\n                        </SiteTitle>\r\n                        \r\n                        <SiteBody siteInfo = {siteInfo}>\r\n                        \r\n                            {siteInfo['body'].includes(\"<p>\") ? renderHTML(siteInfo['body']) : <p>{siteInfo['body']}</p> }\r\n                            \r\n                            \r\n                          <ResultButton id={siteId} key={siteInfo['owner_id']}\r\n                                        onClick={this.changeSite}>Visit</ResultButton>\r\n                        </SiteBody>\r\n                      </SitePanel>                  \r\n                    </div>\r\n                );\r\n            }\r\n        }\r\n        \r\n        return(\r\n            <div>\r\n              {this.visitSite()}\r\n              {sites}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//displays sitebox (user's sites) AND site creation form\r\nclass SiteCreation0 extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            sites:{}, \r\n            background_color:'Gray',\r\n            name:'',\r\n            title:'', \r\n            title_font:'Times New Roman', \r\n            title_font_size:'', \r\n            body:'', \r\n            body_font:'Times New Roman', \r\n            body_font_size:'',\r\n            genre_music:false,\r\n            genre_art:false,\r\n            genre_film:false,\r\n            genre_writing:false\r\n        };\r\n        this.createSite = this.createSite.bind(this);\r\n        this.change = this.change.bind(this);\r\n        this.changeCheckbox = this.changeCheckbox.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        const user_id = this.props.match.params.user_id;\r\n        axios.get(APIURL + 'sites/'.concat(user_id)).then( response => {\r\n            this.setState({'sites' : response});\r\n            console.log(response);\r\n        });\r\n        \r\n        axios.get(APIURL + 'user/'.concat(user_id)).then( response => {\r\n            this.setState({'name' : response['data'].name});\r\n        });\r\n    }\r\n    \r\n    createSite(){\r\n        const user_id = this.props.match.params.user_id;\r\n        axios.post(APIURL+\"sites/\"+user_id, {\r\n            background_color:this.state.background_color,\r\n            name:this.state.name,\r\n            title:this.state.title,\r\n            title_font:this.state.title_font,\r\n            title_font_size:this.state.title_font_size,\r\n            body:this.state.body,\r\n            body_font:this.state.body_font,\r\n            body_font_size:this.state.body_font_size,\r\n            genre_music:this.state.genre_music,\r\n            genre_art:this.state.genre_art,\r\n            genre_film:this.state.genre_film,\r\n            genre_writing:this.state.genre_writing\r\n        }, {\r\n            headers: {\r\n                'Authorization': `Bearer ${this.props.jwt}` \r\n            }\r\n        }).then(response => {\r\n            this.setState({'sites' : response});\r\n            console.log(response);\r\n        });\r\n    }\r\n    \r\n    change(event){\r\n        this.setState({ [event.target.name] : event.target.value });\r\n    }\r\n    \r\n    changeCheckbox(event){\r\n        //event.target.value = event.target.checked;\r\n        //this.change(event);\r\n        this.setState({ [event.target.name] : event.target.checked });\r\n\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div>\r\n              <p>These are your created sites:</p>\r\n              <SiteBox results={this.state.sites} />\r\n              <form>\r\n              Title:\r\n              <select name='title_font' value={this.state.title_font} onChange={this.change}>\r\n                <option value=\"American Typewriter\">American Typewriter</option>\r\n                <option value=\"Impact\">Impact</option>\r\n                <option value=\"Fantasy\">Fantasy</option>\r\n                <option value=\"Times New Roman\">Times New Roman</option>\r\n                <option value=\"Comic Sans MS\">Comic Sans MS</option>\r\n              </select>\r\n              <input type=\"text\" name=\"title\" value={this.state.title}\r\n                            onChange={this.change}/>\r\n              <br />\r\n                Title Font Size:<input type=\"text\" name=\"title_font_size\"\r\n                                       value={this.state.title_font_size} onChange={this.change}/>\r\n              <br />Body:\r\n              <select name='body_font' value={this.state.body_font} onChange={this.change}>            \r\n                <option value=\"American Typewriter\">American Typewriter</option>\r\n                <option value=\"Impact\">Impact</option>\r\n                <option value=\"Fantasy\">Fantasy</option>\r\n                <option value=\"Times New Roman\">Times New Roman</option>\r\n                <option value=\"Comic Sans MS\">Comic Sans MS</option>\r\n              </select>\r\n              <textarea name=\"body\" value={this.state.body}\r\n                            onChange={this.change}/>\r\n              <br />\r\n                Body Font Size:<input type=\"text\" name=\"body_font_size\"\r\n                                      value={this.state.body_font_size}\r\n                                      onChange={this.change}/>\r\n              <br />\r\n              Background Color\r\n                <select name='background_color' value={this.state.background_color}\r\n                        onChange={this.change}>            \r\n                  <option value=\"Maroon\">Maroon</option>\r\n                  <option value=\"Red\">Red</option>\r\n                  <option value=\"Orange\">Orange</option>\r\n                  <option value=\"Yellow\">Yellow</option>\r\n                  <option value=\"Olive\">Olive</option>\r\n                  <option value=\"Green\">Green</option>\r\n                  <option value=\"Purple\">Purple</option>\r\n                  <option value=\"Fuchsia\">Fuchsia</option>\r\n                  <option value=\"Lime\">Lime</option>\r\n                  <option value=\"Teal\">Teal</option>\r\n                  <option value=\"Gray\">Gray</option>\r\n                </select>\r\n              <br />\r\n            <div>\r\n              Genre: Music<input \r\n\t\t       type=\"checkbox\" \r\n\t\t       name=\"genre_music\"\r\n\t\t       onChange={this.changeCheckbox}>\r\n\t\t       </input>\r\n\t\t       \r\n               Art<input \r\n\t\t       type=\"checkbox\" \r\n\t\t       name=\"genre_art\"\r\n\t\t       onChange={this.changeCheckbox}>\r\n\t\t       </input>\r\n\t\t       \r\n               Film<input \r\n\t\t       type=\"checkbox\" \r\n\t\t       name=\"genre_film\"\r\n\t\t       onChange={this.changeCheckbox}>\r\n\t\t       </input>\r\n\t\t       \r\n               Writing<input \r\n\t\t       type=\"checkbox\" \r\n\t\t       name=\"genre_writing\"\r\n\t\t       onChange={this.changeCheckbox}>\r\n\t\t       </input>\r\n\t\t    </div>\r\n\t\t     <br/>\r\n              \r\n              \r\n              </form>\r\n              <ResultButton onClick={this.createSite}> Create Site </ResultButton>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n//displays a single site\r\nclass SiteScreen0 extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        \r\n        this.state = { site: {\r\n            title: '',\r\n                body: '',\r\n                background_color: 'white',\r\n                body_font_size: '48',\r\n                title_font_size: '30',\r\n                body_font: 'Comic Sans MS',\r\n                title_font: 'Arial',\r\n                genre_music: '',\r\n                genre_art: '',\r\n                genre_film: '',\r\n                genre_writing: '',\r\n                owner_id: ''\r\n        }, site_id:'', showDelete:false, redirect:false };\r\n        \r\n        this.putSite = this.putSite.bind(this);\r\n        this.activateDelete = this.activateDelete.bind(this);\r\n        this.deleteSite = this.deleteSite.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        const site_id = this.props.match.params.site_id;\r\n        const url = APIURL.concat('site/', site_id);\r\n        \r\n        //get site\r\n        axios.get(url).then( response => {\t\t\r\n            const id = Object.keys(response['data'])[0];\r\n            const ret = response['data'][id];\r\n            //console.log(ret);\r\n            this.setState({ 'site': ret, 'site_id': site_id });\r\n            \r\n            //render delete button\r\n            if (ret.owner_id.toString() === this.props.user_id.toString()){\r\n                this.setState({ 'showDelete': true });\r\n            }\r\n            \r\n        });\r\n        \r\n        \r\n    }\r\n    \r\n    putSite(){\r\n\t\r\n    }\r\n    activateDelete(){\r\n        const site_id = this.props.match.params.site_id;\r\n        const url = APIURL.concat('site/', site_id);\r\n        \r\n        if(this.props.user_id.toString() === this.state.site.owner_id.toString()){\r\n            console.log(this.props.jwt);\r\n            axios.delete(url, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${this.props.jwt}` \r\n                }\r\n            }).then( response => {\r\n                console.log(\"Site was deleted!\");\r\n                this.setState({redirect:true});\r\n            });\r\n        }\r\n    }\r\n    \r\n    deleteSite(){\r\n        //const site_id = this.props.match.params.site_id;\r\n        //const url = APIURL.concat('site/', site_id);\r\n        var r=window.confirm(\"are you sure you want to delete your site?\");        \r\n        if (r) {\r\n            this.activateDelete();        \r\n        } else {\r\n            alert(\"You are not the owner of this site\");\r\n        }\r\n    }\r\n    \r\n    render(){\r\n        var site = this.state.site;\r\n        \r\n        return (\r\n            \r\n            <div>\t     \r\n\t      <SitePanel siteInfo = {site}>\r\n\t\t<SiteTitle siteInfo = {site}>\r\n\t\t  <h2> {site['title']} </h2>\r\n\t\t</SiteTitle>\r\n\t\t\r\n\t\t<SiteBody siteInfo = {site}>   \r\n          {site['body'].includes(\"<p>\") ? renderHTML(site['body']) : <p>{site['body']}</p> }\r\n\r\n          <div>\r\n          <br />\r\n          Genres:\r\n          {site['genre_music'].toString() === 'true' ? <li>Music</li>  : ''}\r\n          {site['genre_art'].toString() === 'true' ? <li> Art </li> : ''}\r\n          {site['genre_film'].toString() === 'true' ? <li> Film </li> : ''}\r\n          {site['genre_writing'].toString() === 'true' ? <li> Writing </li> : ''}\r\n          <br />\r\n          </div>\r\n          <p> site created by: {site.name} </p>\r\n          \r\n          {this.state.showDelete ? <ResultButton onClick={this.deleteSite}> Delete</ResultButton> : '' }\r\n          {this.state.redirect ? <Redirect to={\"/sites/\"+this.state.site.owner_id} /> : ''}\r\n\t\t</SiteBody>\r\n\t      </SitePanel>                    \r\n\t    </div>\r\n        );\r\n    }   \r\n}\r\n\r\nconst SiteCreation = withRouter(SiteCreation0);\r\nconst SiteScreen = withRouter(SiteScreen0);\r\nexport {SiteBox, SiteScreen, SiteBody, SitePanel, SiteTitle, SiteCreation};\r\n","import React from 'react';\r\nimport { Component } from 'react';\r\nimport styled from 'styled-components'\r\nimport axios from 'axios';\r\n\r\nimport './App.css';\r\n// import {SliderPage, ResultPanel, ResultSites} from './Components/components.js';\r\nimport {SliderPage, ResultPanel} from './Components/components.js';\r\nimport {SiteBox} from './Site.js';\r\n//submit discover filter button\r\nconst FilterButton = styled.button`\r\n\tpadding: 5px;\r\n\tmargin: 3px;\r\n\tbackground-color: #ccc;\r\n\tfont-size: 110%;\r\n\tfont-family: inherit;\r\n`;\r\n\r\n//filter panel for genres\r\nconst FilterPanel = styled.div`\r\n\tdisplay: inline-block;\r\n\tfont-size: 1em;\r\n\tbackground-color: #444;\r\n\tcolor: #fff;\r\n\tborder-radius: 0px;\r\n\tpadding: 20px;\r\n\tmargin: 10px;\r\n\tfont-family: serif\r\n`;\r\n\r\n//genre_music, genre_art, genre_film, genre_writing\r\n//const APIURL = 'http://localhost:5000/';\r\nconst APIURL='';\r\nexport default class DiscoverScreen extends Component {\r\n    constructor(props){\r\n        super(props)\r\n\t//at first there is no state to submit\r\n\t//this.state = {}\r\n        this.state = { genre_music: \"0\", genre_art: \"0\", genre_film: \"0\",\r\n                       genre_writing: \"0\", results: {} };\r\n\t\r\n        this.updateFilter = this.updateFilter.bind(this);\r\n\t    this.submitSearch = this.submitSearch.bind(this);\r\n        this.updateMayContain = this.updateMayContain.bind(this);\r\n    }\r\n    \r\n    updateFilter(event) {\r\n\tif (event.target.checked) {\r\n\t    //make may genre unchecked\r\n\t    var mayName = event.target.name.substring(6);\r\n\t    document.getElementsByName(mayName)[0].checked = false;\r\n\t    \r\n\t    this.setState({\r\n\t\t[event.target.name] : \"1\",\r\n\t    });\r\n\t} else {\r\n\t    this.setState({\r\n\t\t[event.target.name] : \"0\",\r\n\t    });\r\n\t}\r\n    }\r\n    \r\n    updateMayContain(event) {\r\n        var genre = \"genre_\".concat(event.target.name);\r\n        if (event.target.checked){\r\n            //make must contain genre unchecked\r\n            \r\n            document.getElementsByName(genre)[0].checked = false;\r\n            this.setState({ [genre] : \"\",});\r\n        } else {\r\n            this.setState({ [genre] : \"0\",});\r\n        }\r\n    }\r\n    \r\n    submitSearch() {\r\n        //erase old results before creating new ones (if there is any)  console.log(response);\r\n        this.setState({'results' : {}});\r\n        axios.post(APIURL + 'discover', this.state).then( response => {\r\n            /*example of response---------\r\n              { \r\n              1 : {title:'example title', body: 'example body', ... },\r\n              2 : {title:'title example', body: 'body example', ... },\r\n              }\r\n            */\r\n            this.setState({'results' : response});\r\n            console.log(this.state);\r\n        });\r\n    };\r\n    \r\n    render(){\r\n\treturn (\r\n\t    <div>\r\n\t      <FilterPanel>\r\n\t\t<h1>Select Genre(s)</h1>\r\n\t\t<h2>must contain | may contain</h2>\r\n\t\tMusic<input \r\n\t               type=\"checkbox\" \r\n\t               name=\"genre_music\"\r\n\t               onChange={this.updateFilter.bind(this)}>\r\n\t\t     </input>\r\n\t\tMusic<input \r\n\t\t       type=\"checkbox\" \r\n\t\t       name=\"music\"\r\n\t\t       onChange={this.updateMayContain.bind(this)}>\r\n\t\t     </input><br/>\r\n\t\tArt<input \r\n\t\t     type=\"checkbox\" \r\n\t\t     name=\"genre_art\"\r\n\t\t     onChange={this.updateFilter.bind(this)}>\r\n\t\t   </input>\r\n\t\tArt<input \r\n\t\t     type=\"checkbox\" \r\n\t\t     name=\"art\"\r\n\t\t     onChange={this.updateMayContain.bind(this)}>\r\n\t\t   </input><br/>\r\n\t\tFilm<input \r\n\t\t      type=\"checkbox\" \r\n\t\t      name=\"genre_film\"\r\n\t\t      onChange={this.updateFilter.bind(this)}>\r\n\t\t    </input>\r\n\t\tFilm<input \r\n\t\t      type=\"checkbox\" \r\n\t\t      name=\"film\"\r\n\t\t      onChange={this.updateMayContain.bind(this)}>\r\n\t\t    </input><br/>\r\n\t\tWriting<input \r\n\t\t\t type=\"checkbox\" \r\n\t\t\t name=\"genre_writing\"\r\n\t\t\t onChange={this.updateFilter.bind(this)}>\r\n\t\t       </input>\r\n\t\tWriting<input \r\n\t\t\t type=\"checkbox\" \r\n\t\t\t name=\"writing\"\r\n\t\t\t onChange={this.updateMayContain.bind(this)}>\r\n\t\t       </input><br/>\t\r\n\t\t<SliderPage />\r\n\t        \r\n\t\t<FilterButton type=\"button\" onClick={this.submitSearch}>\r\n                  Discover!\r\n                </FilterButton>\r\n\t      </FilterPanel>\r\n\t      <br />\r\n\t      <ResultPanel>\r\n\t\t<SiteBox results={this.state.results} />\r\n\t      </ResultPanel>\r\n\t    </div>\r\n\t);\r\n    }\r\n}\r\n\r\nexport {DiscoverScreen, FilterButton, FilterPanel};\r\n","import React from 'react';\r\nimport { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst APIURL = 'http://localhost:5000/';\r\n\r\nclass RegisterScreen extends Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {username : '', password:'', pass_or_text:'password', email:''};\r\n        this.textType = \"password\"\r\n\r\n        //this.logIt = this.logIt.bind(this)\r\n        this.updateUsername = this.updateUsername.bind(this);\r\n        this.updatePassword = this.updatePassword.bind(this);\r\n        this.updateShowPassword = this.updateShowPassword.bind(this);\r\n        this.updateEmail = this.updateEmail.bind(this);\r\n\t\tthis.goRegister = this.goRegister.bind(this);\r\n    }\r\n    \r\n    updateUsername(event) {\r\n        this.setState({username: event.target.value});\r\n    }\r\n    \r\n    updatePassword(event) {\r\n        this.setState({password: event.target.value});           \r\n    }\r\n    \r\n    updateEmail(event){\r\n        this.setState({email: event.target.value});\r\n    }\r\n    \r\n    updateShowPassword(event){\r\n        this.setState({pass_or_text: (this.state.pass_or_text === 'password' ? 'text' : 'password')});\r\n    }\r\n    \r\n    goRegister(event){\r\n\t//console.log({msg:'successful button click'});\r\n\taxios.post(APIURL + 'user', {\r\n\t    name: this.state.username, \r\n\t    password: this.state.password, \r\n\t    email: this.state.email}).then( response => {\r\n\t\t/*example of response---------\r\n\t\t  { \r\n\t\t  1 : {title:'example title', body: 'example body', ... },\r\n\t\t  2 : {title:'title example', body: 'body example', ... },\r\n\t\t  }\r\n\t\t*/\r\n\t\tconsole.log(response);\r\n\t\t//this.setState({['results'] : response});\r\n\t    });\r\n    }\r\n    \r\n    render(){\r\n        const { pass_or_text } = this.state;\r\n        \r\n        return(\r\n            <div>\r\n              <form>\r\n                <p>register</p>\r\n                email<input type=\"text\" name=\"email\" value={this.state.email}\r\n                            onChange={this.updateEmail}/>\r\n        \tusername<input type=\"text\" value={this.state.username}\r\n\t                       onChange={this.updateUsername}/>\r\n\t        <br/>\r\n        \tpassword<input type={pass_or_text} value={this.state.password} name=\"password\"\r\n        \t               onChange={this.updatePassword}/>\r\n\t        <br/>\r\n        \tshow password<input type=\"checkbox\" value=\"\" name=\"ShowPassword\"\r\n        \t                    onChange={this.updateShowPassword}/>\r\n\t        <br/>\r\n\t        <button type='button' onClick={ this.goRegister} \r\n\t                name='registerButton'>register</button>\r\n\t      </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { RegisterScreen };\r\n","import React from 'react';\r\nimport { Component } from 'react';\r\n//import styled, { css } from 'styled-components'\r\nimport axios from 'axios';\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport {\r\n// eslint-disable-next-line\r\n  BrowserRouter as Router, Switch, Route, Link, useRouteMatch, useParams\r\n} from \"react-router-dom\";\r\n\r\n\r\n//const APIURL = 'http://localhost:5000/';\r\nconst APIURL='';\r\n\r\n//PROFILE COMPONENT\r\nclass UserInformation extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\t\r\n        this.state = {userInfo:{}, selectedFile: null, imageURL:'http://localhost:5000/photo/9'};\r\n    \r\n        this.handleUploadImage = this.handleUploadImage.bind(this);\r\n    }\t\r\n    \r\n    componentDidMount(){\r\n\t//const id = this.props.match.params.id;\r\n\tconst user_id = this.props.match.params.user_id;\r\n        \r\n\taxios.get(APIURL + 'user/'.concat(user_id)).then( response => {\r\n\t    this.setState({'userInfo' : response['data']});\r\n\t    console.log(response);\r\n\t});\r\n    }\r\n    handleUploadImage(ev) {\r\n        ev.preventDefault();\r\n\r\n        const data = new FormData();\r\n        data.append('file', this.uploadInput.files[0]);\r\n        data.append('user_id', this.state.userInfo.user_id);\r\n        \r\n        axios\r\n        .post(APIURL+'photo', data)\r\n        .then(res => console.log(res))\r\n        .catch(err => console.warn(err));\r\n    }\r\n    \r\n    \r\n    \r\n    \r\n    render(){\t\t\r\n        //getting every key of user's info\r\n        var userStuff = [];\r\n        for (var key of Object.keys(this.state['userInfo'])){\r\n            userStuff.push(\r\n                <div key={key}>\r\n                    <p>{key}:{this.state.userInfo[key]}</p>\r\n                </div>\r\n            );\r\n        }\r\n    \r\n        return(\r\n            <>\r\n              <div>\r\n                <p>This is {this.state.userInfo['name']}'s profile</p>\r\n                {userStuff}\r\n              </div>\r\n              <div>\r\n              <img src={this.state.imageURL} alt=\"img\" />\r\n              \r\n              <form onSubmit={this.handleUploadImage}>\r\n                <div>\r\n                  <input ref={(ref) => { this.uploadInput = ref; }} type=\"file\" />\r\n                </div>\r\n                \r\n                <div>\r\n                  <button>Upload</button>\r\n                </div>\r\n                \r\n              </form>\r\n                      \r\n              </div>\r\n              \r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nconst Profile = withRouter(UserInformation);\r\nexport {Profile};\r\n","import React from 'react';\r\nimport { Component } from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport Cookies from 'universal-cookie';\r\n\r\n\r\n\r\nimport axios from 'axios';\r\nimport {\r\n  HashRouter,\r\n  Switch,\r\n  Route,\r\n  // eslint-disable-next-line\r\n  Link, useRouteMatch, useParams\r\n} from \"react-router-dom\";\r\nimport { Container /*, Col, Row */ } from 'react-bootstrap';\r\n\r\nimport './App.css';\r\n// eslint-disable-next-line\r\nimport {DiscoverScreen} from './Discover.js';\r\nimport {SiteScreen, SiteCreation} from './Site.js';\r\nimport {RegisterScreen} from './Register.js';\r\nimport {Profile} from './Profile.js';\r\n\r\n//components imported\r\nimport {BoxPanel, NavBar,  /*, ResultSites */ } from './Components/components.js';\r\n\r\n//flask url\r\n//const APIURL = 'http://localhost:5000/';\r\nconst APIURL='';\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {loginToken: '', user_id:''};\r\n        this.login = this.login.bind(this);\r\n        \r\n        \r\n    }\r\n    componentDidMount(){\r\n        const cookies = new Cookies();\r\n        //console.log(cookies.get('jwt'));\r\n        //console.log(cookies.get('user_id'));\r\n        if (cookies.get('jwt') && cookies.get('user_id') && cookies.get('name')){\r\n            this.setState({ loginToken: cookies.get('jwt'), user_id: cookies.get('user_id'), name: cookies.get('name') });\r\n        }\r\n        \r\n        \r\n    }\r\n    login(username, password)  {\r\n\r\n    axios.put(\r\n            APIURL + 'user',\r\n            { 'name':username, 'password':password})\r\n            .then( response => {\r\n                if (response['data']['jwt'].length > 0){\r\n                    this.setState({'loginToken' : response['data']['jwt'],\r\n                                   'user_id':response['data']['id'] });\r\n                    const cookies = new Cookies();\r\n                    cookies.set('user_id', response['data']['id'], { path: '/', expires: new Date(Date.now()+3600000) });\r\n                    cookies.set('jwt', response['data']['jwt'], { path: '/', expires: new Date(Date.now()+3600000) });\r\n                    cookies.set('name', username, { path: '/', expires: new Date(Date.now()+3600000) });\r\n                    \r\n                } else{\r\n                    return false;\r\n                }\r\n        //store user's id and token into cookies\r\n        \r\n\t\t//console.log(response);\r\n\t    });  // todo: add error-checking\r\n        \r\n        \r\n        return true;\r\n    }\r\n    \r\n    render(){\r\n        \r\n    //<DiscoverScreen /> route guide\r\n\treturn (\r\n\t    <HashRouter>\r\n              <div className=\"App\">\r\n                <Banner login={ this.login } user_id={ this.state.user_id } />\r\n                \r\n\t\t<Switch>\r\n\t\t  <Route exact path=\"/\">\r\n\t\t    <p>this is the app</p>\r\n\t\t  </Route>\r\n                  \r\n\t\t  <Route path=\"/user/:user_id\">\r\n\t\t    <Profile />                   \r\n\t\t  </Route>\r\n          \r\n                  <Route exact path=\"/sites/:user_id\">\r\n                    <SiteCreation jwt={this.state.loginToken} />\r\n                  </Route>\r\n                  \r\n\t\t  <Route exact path=\"/site/:site_id\">\r\n\t\t    <SiteScreen user_id={ this.state.user_id } jwt={this.state.loginToken}  />\r\n\t\t  </Route>\r\n                  \r\n\t\t  <Route path=\"/register\">\r\n                    <RegisterScreen/>\r\n\t\t  </Route>\r\n                  \r\n                  <Route path=\"/discover\">\r\n                    <DiscoverScreen />\r\n                  </Route>\r\n                  \r\n                  <Route path=\"/user\">\r\n                    <p>Authorization Failed: You must be logged in to view your profile</p>\r\n                  </Route>\r\n\t\t</Switch>\r\n\t      </div>\r\n\t    </HashRouter>\r\n\t);\r\n    }\r\n}\r\n\r\nclass Banner extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.updateUsername = this.updateUsername.bind(this);\r\n        this.updatePassword = this.updatePassword.bind(this);\r\n        this.callLogin = this.callLogin.bind(this);\r\n        this.gotoRegister = this.gotoRegister.bind(this);\r\n        this.renderRedirect = this.renderRedirect.bind(this);\r\n        this.state = { name:'', password:'', user_id:'', redirect: false, isLoggedIn: false };\r\n        \r\n        this.loggedIn = this.loggedIn.bind(this);\r\n        this.logout = this.logout.bind(this);\r\n    }\r\n    \r\n    componentDidMount(){\r\n        //makes user_id the same as app (so if logged in on app, logged in on banner)\r\n        \r\n    }\r\n\r\n    gotoRegister(event) {\r\n        this.setState({redirect: true});\r\n    }\r\n\r\n    renderRedirect() {\r\n        return (\r\n            this.state.redirect ? <Redirect to='/register/'/> : ''\r\n        );\r\n    }\r\n    \r\n    updateUsername(event) {\r\n        this.setState({name: event.target.value});\r\n    }\r\n    \r\n    updatePassword(event) {\r\n        this.setState({password: event.target.value});\r\n    }\r\n\r\n    callLogin(event) {\r\n        if (this.state.name !== 0 && this.state.password !== 0){\r\n            let r = this.props.login(this.state.name, this.state.password);\r\n            //check if logged in\r\n            //console.log(r);\r\n            if (r)\r\n                this.setState({isLoggedIn:true});\r\n        }\r\n    }\r\n    loggedIn(){\r\n        const cookies = new Cookies();\r\n        \r\n        let name = '';\r\n        if (cookies.get('name')){\r\n            name = cookies.get('name')\r\n            //console.log('cookie name'+name)\r\n            return name\r\n        }else if (this.state.name && this.state.isLoggedIn){\r\n            name = this.state.name\r\n            //console.log('states name'+name)\r\n            return name\r\n        }else{\r\n            return false\r\n        }\r\n    }\r\n    logout(event){\r\n        const cookies = new Cookies();\r\n        cookies.remove('name')\r\n        cookies.remove('jwt')\r\n        cookies.remove('user_id')\r\n        this.setState({isLoggedIn: false});\r\n        \r\n    }\r\n    render() {\r\n        // todo: make a conditional render to just show \"logged in\" when logged in\r\n        // todo: add a register button\r\n        //const cookies = new Cookies();\r\n        \r\n        \r\n        \r\n        return (          \r\n            <div className=\"App-banner\">\r\n              <div className='App-title'>\r\n                <Container fluid>                  \r\n                  <BoxPanel>\r\n                    Nathan's World\r\n                  </BoxPanel>\r\n                                    \r\n                  <BoxPanel>\r\n                    { !this.loggedIn() ? \r\n                      <div>\r\n                        {this.renderRedirect()}\r\n                        <form>\r\n                          username<input type=\"text\" value={this.state.name}\r\n                                         onChange={this.updateUsername}/>\r\n                          <br/>\r\n                          password<input type=\"password\" name=\"password\" value={this.state.password}\r\n                                         onChange={this.updatePassword}/>\r\n                          <br/>\r\n                          <button type='button' onClick={this.callLogin} \r\n                                  name='loginButton'>LOGIN</button>\r\n                          <button type='button' onClick={this.gotoRegister}\r\n                                  name='registerButton'>Register</button>\r\n                        </form>\r\n                      </div> \r\n                      \r\n                      : \r\n                      \r\n                      <div>\r\n                      <p>Logged in as: {this.loggedIn()}</p>\r\n                      <button type='button' onClick={this.logout}>LOGOUT</button>\r\n                      </div>\r\n                    }\r\n                  </BoxPanel>\r\n                  \r\n                  <NavBar user_id = {this.props.user_id} />\r\n                  \r\n                </Container>\r\n              </div>\r\n            </div>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n//export Banner, RegistrationScreen; Why does banner not work even when its exported?\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}